// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using oficinaCovid.App.Persistencia;

namespace oficinaCovid.App.Persistencia.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20211001022355_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("oficinaCovid.App.Dominio.Diagnostico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DiasAislamiento")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaDiagnostico")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFinAislamiento")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int");

                    b.Property<bool>("Positivo")
                        .HasColumnType("bit");

                    b.Property<int?>("SintomatologiaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.HasIndex("SintomatologiaId");

                    b.ToTable("Diagnosticos");
                });

            modelBuilder.Entity("oficinaCovid.App.Dominio.Disponibilidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Hora")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Disponibilidades");
                });

            modelBuilder.Entity("oficinaCovid.App.Dominio.Oficina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Aforo")
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Oficinas");
                });

            modelBuilder.Entity("oficinaCovid.App.Dominio.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Personas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Persona");
                });

            modelBuilder.Entity("oficinaCovid.App.Dominio.Sede", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Barrio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroOficinas")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sedes");
                });

            modelBuilder.Entity("oficinaCovid.App.Dominio.Sintomatologia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Desaliento")
                        .HasColumnType("bit");

                    b.Property<bool>("DificultadRespirar")
                        .HasColumnType("bit");

                    b.Property<bool>("DolorGarganta")
                        .HasColumnType("bit");

                    b.Property<bool>("Fiebre")
                        .HasColumnType("bit");

                    b.Property<bool>("PerdidaGusto")
                        .HasColumnType("bit");

                    b.Property<bool>("PerdidaOlfato")
                        .HasColumnType("bit");

                    b.Property<bool>("TosSeca")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Sintomatologias");
                });

            modelBuilder.Entity("oficinaCovid.App.Dominio.Administrativo", b =>
                {
                    b.HasBaseType("oficinaCovid.App.Dominio.Persona");

                    b.Property<string>("Rol")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Administrativo");
                });

            modelBuilder.Entity("oficinaCovid.App.Dominio.Aseador", b =>
                {
                    b.HasBaseType("oficinaCovid.App.Dominio.Persona");

                    b.Property<DateTime>("horaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("horaSalida")
                        .HasColumnType("datetime2");

                    b.Property<string>("nombreEmpresa")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Aseador");
                });

            modelBuilder.Entity("oficinaCovid.App.Dominio.Proveedor", b =>
                {
                    b.HasBaseType("oficinaCovid.App.Dominio.Persona");

                    b.Property<string>("ServicioRealizado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombreEmpresa")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Proveedor_nombreEmpresa");

                    b.HasDiscriminator().HasValue("Proveedor");
                });

            modelBuilder.Entity("oficinaCovid.App.Dominio.Secretario", b =>
                {
                    b.HasBaseType("oficinaCovid.App.Dominio.Persona");

                    b.HasDiscriminator().HasValue("Secretario");
                });

            modelBuilder.Entity("oficinaCovid.App.Dominio.Diagnostico", b =>
                {
                    b.HasOne("oficinaCovid.App.Dominio.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId");

                    b.HasOne("oficinaCovid.App.Dominio.Sintomatologia", "Sintomatologia")
                        .WithMany()
                        .HasForeignKey("SintomatologiaId");

                    b.Navigation("Persona");

                    b.Navigation("Sintomatologia");
                });
#pragma warning restore 612, 618
        }
    }
}
